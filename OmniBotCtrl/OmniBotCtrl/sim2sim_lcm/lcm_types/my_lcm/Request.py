"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

class Request(object):

    __slots__ = ["command", "eu_ang", "omega", "acc", "q", "dq", "tau"]

    __typenames__ = ["float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [[10], [3], [3], [3], [12], [12], [12]]

    def __init__(self):
        self.command = [ 0.0 for dim0 in range(10) ]
        """ LCM Type: float[10] """
        self.eu_ang = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: float[3] """
        self.omega = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: float[3] """
        self.acc = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: float[3] """
        self.q = [ 0.0 for dim0 in range(12) ]
        """ LCM Type: float[12] """
        self.dq = [ 0.0 for dim0 in range(12) ]
        """ LCM Type: float[12] """
        self.tau = [ 0.0 for dim0 in range(12) ]
        """ LCM Type: float[12] """

    def encode(self):
        buf = BytesIO()
        buf.write(Request._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>10f', *self.command[:10]))
        buf.write(struct.pack('>3f', *self.eu_ang[:3]))
        buf.write(struct.pack('>3f', *self.omega[:3]))
        buf.write(struct.pack('>3f', *self.acc[:3]))
        buf.write(struct.pack('>12f', *self.q[:12]))
        buf.write(struct.pack('>12f', *self.dq[:12]))
        buf.write(struct.pack('>12f', *self.tau[:12]))

    @staticmethod
    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Request._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Request._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = Request()
        self.command = struct.unpack('>10f', buf.read(40))
        self.eu_ang = struct.unpack('>3f', buf.read(12))
        self.omega = struct.unpack('>3f', buf.read(12))
        self.acc = struct.unpack('>3f', buf.read(12))
        self.q = struct.unpack('>12f', buf.read(48))
        self.dq = struct.unpack('>12f', buf.read(48))
        self.tau = struct.unpack('>12f', buf.read(48))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if Request in parents: return 0
        tmphash = (0x2e7919eca72e6e01) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if Request._packed_fingerprint is None:
            Request._packed_fingerprint = struct.pack(">Q", Request._get_hash_recursive([]))
        return Request._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Request._get_packed_fingerprint())[0]

