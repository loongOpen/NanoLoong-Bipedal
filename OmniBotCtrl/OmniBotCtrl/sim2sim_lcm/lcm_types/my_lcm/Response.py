"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

class Response(object):

    __slots__ = ["q_exp", "dq_exp", "tau_exp"]

    __typenames__ = ["float", "float", "float"]

    __dimensions__ = [[12], [12], [12]]

    def __init__(self):
        self.q_exp = [ 0.0 for dim0 in range(12) ]
        """ LCM Type: float[12] """
        self.dq_exp = [ 0.0 for dim0 in range(12) ]
        """ LCM Type: float[12] """
        self.tau_exp = [ 0.0 for dim0 in range(12) ]
        """ LCM Type: float[12] """

    def encode(self):
        buf = BytesIO()
        buf.write(Response._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>12f', *self.q_exp[:12]))
        buf.write(struct.pack('>12f', *self.dq_exp[:12]))
        buf.write(struct.pack('>12f', *self.tau_exp[:12]))

    @staticmethod
    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Response._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Response._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = Response()
        self.q_exp = struct.unpack('>12f', buf.read(48))
        self.dq_exp = struct.unpack('>12f', buf.read(48))
        self.tau_exp = struct.unpack('>12f', buf.read(48))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if Response in parents: return 0
        tmphash = (0x38736ab56d952055) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if Response._packed_fingerprint is None:
            Response._packed_fingerprint = struct.pack(">Q", Response._get_hash_recursive([]))
        return Response._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Response._get_packed_fingerprint())[0]

